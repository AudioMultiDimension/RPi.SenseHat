////////////////////////////////////////////////////////////////////////////
//
//  This file is part of Rpi.SenseHat.Demo
//
//  Copyright (c) 2015, Mattias Larsson
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of 
//  this software and associated documentation files (the "Software"), to deal in 
//  the Software without restriction, including without limitation the rights to use, 
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
//  Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all 
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//using System;
//using System.Linq;
//using System.Threading;
//using Windows.ApplicationModel.Background;
//using Windows.UI;
//using Emmellsoft.IoT.Rpi.SenseHat;
//using Emmellsoft.IoT.Rpi.SenseHat.Fonts;

//namespace RPi.SenseHat.Test
//{
//	public sealed class StartupTaskOld : IBackgroundTask
//	{
//		private static readonly byte[] BwFontBytes = { 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x41, 0x00, 0x00, 0x7c, 0x7e, 0x0b, 0x0b, 0x7e, 0x7c, 0x00, 0xff, 0x00, 0x42, 0x00, 0x00, 0x7f, 0x7f, 0x49, 0x49, 0x7f, 0x36, 0x00, 0xff, 0x00, 0x43, 0x00, 0x00, 0x3e, 0x7f, 0x41, 0x41, 0x63, 0x22, 0x00, 0xff, 0x00, 0x44, 0x00, 0x00, 0x7f, 0x7f, 0x41, 0x63, 0x3e, 0x1c, 0x00, 0xff, 0x00, 0x45, 0x00, 0x00, 0x7f, 0x7f, 0x49, 0x49, 0x41, 0x41, 0x00, 0xff, 0x00, 0x46, 0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01, 0x01, 0x00, 0xff, 0x00, 0x47, 0x00, 0x00, 0x3e, 0x7f, 0x41, 0x49, 0x7b, 0x3a, 0x00, 0xff, 0x00, 0x48, 0x00, 0x00, 0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f, 0x00, 0xff, 0x00, 0x49, 0x00, 0x00, 0x41, 0x7f, 0x7f, 0x41, 0x00, 0xff, 0x00, 0x4a, 0x00, 0x00, 0x20, 0x60, 0x41, 0x7f, 0x3f, 0x01, 0x00, 0xff, 0x00, 0x4b, 0x00, 0x00, 0x7f, 0x7f, 0x1c, 0x36, 0x63, 0x41, 0x00, 0xff, 0x00, 0x4c, 0x00, 0x00, 0x7f, 0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0xff, 0x00, 0x4d, 0x00, 0x00, 0x7f, 0x7f, 0x06, 0x0c, 0x06, 0x7f, 0x7f, 0x00, 0xff, 0x00, 0x4e, 0x00, 0x00, 0x7f, 0x7f, 0x0e, 0x1c, 0x7f, 0x7f, 0x00, 0xff, 0x00, 0x4f, 0x00, 0x00, 0x3e, 0x7f, 0x41, 0x41, 0x7f, 0x3e, 0x00, 0xff, 0x00, 0x50, 0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x0f, 0x06, 0x00, 0xff, 0x00, 0x51, 0x00, 0x00, 0x1e, 0x3f, 0x21, 0x61, 0x7f, 0x5e, 0x00, 0xff, 0x00, 0x52, 0x00, 0x00, 0x7f, 0x7f, 0x19, 0x39, 0x6f, 0x46, 0x00, 0xff, 0x00, 0x53, 0x00, 0x00, 0x26, 0x6f, 0x49, 0x49, 0x7b, 0x32, 0x00, 0xff, 0x00, 0x54, 0x00, 0x00, 0x01, 0x01, 0x7f, 0x7f, 0x01, 0x01, 0x00, 0xff, 0x00, 0x55, 0x00, 0x00, 0x3f, 0x7f, 0x40, 0x40, 0x7f, 0x3f, 0x00, 0xff, 0x00, 0x56, 0x00, 0x00, 0x1f, 0x3f, 0x60, 0x60, 0x3f, 0x1f, 0x00, 0xff, 0x00, 0x57, 0x00, 0x00, 0x7f, 0x7f, 0x30, 0x18, 0x30, 0x7f, 0x7f, 0x00, 0xff, 0x00, 0x58, 0x00, 0x00, 0x63, 0x77, 0x1c, 0x1c, 0x77, 0x63, 0x00, 0xff, 0x00, 0x59, 0x00, 0x00, 0x07, 0x0f, 0x78, 0x78, 0x0f, 0x07, 0x00, 0xff, 0x00, 0x5a, 0x00, 0x00, 0x61, 0x71, 0x59, 0x4d, 0x47, 0x43, 0x00, 0xff, 0x00, 0xc5, 0x00, 0x00, 0x70, 0x7a, 0x2d, 0x2d, 0x7a, 0x70, 0x00, 0xff, 0x00, 0xc4, 0x00, 0x00, 0x71, 0x79, 0x2c, 0x2c, 0x79, 0x71, 0x00, 0xff, 0x00, 0xd6, 0x00, 0x00, 0x39, 0x7d, 0x44, 0x44, 0x7d, 0x39, 0x00, 0xff, 0x00, 0xc9, 0x00, 0x00, 0x7c, 0x7c, 0x54, 0x56, 0x45, 0x45, 0x00, 0xff, 0x00, 0xdc, 0x00, 0x00, 0x3d, 0x7d, 0x40, 0x40, 0x7d, 0x3d, 0x00, 0xff, 0x00, 0x61, 0x00, 0x20, 0x74, 0x54, 0x54, 0x7c, 0x78, 0x00, 0xff, 0x00, 0x62, 0x00, 0x00, 0x7f, 0x7f, 0x48, 0x48, 0x78, 0x30, 0x00, 0xff, 0x00, 0x63, 0x00, 0x00, 0x38, 0x7c, 0x44, 0x44, 0x44, 0x00, 0xff, 0x00, 0x64, 0x00, 0x00, 0x38, 0x7c, 0x44, 0x44, 0x7f, 0x7f, 0x00, 0xff, 0x00, 0x65, 0x00, 0x00, 0x38, 0x7c, 0x54, 0x54, 0x5c, 0x18, 0x00, 0xff, 0x00, 0x66, 0x00, 0x00, 0x04, 0x7e, 0x7f, 0x05, 0x05, 0x00, 0xff, 0x00, 0x67, 0x00, 0x00, 0x98, 0xbc, 0xa4, 0xa4, 0xfc, 0x7c, 0x00, 0xff, 0x00, 0x68, 0x00, 0x00, 0x7f, 0x7f, 0x08, 0x08, 0x78, 0x70, 0x00, 0xff, 0x00, 0x69, 0x00, 0x00, 0x48, 0x7a, 0x7a, 0x40, 0x00, 0xff, 0x00, 0x6a, 0x00, 0x80, 0x80, 0x80, 0xfa, 0x7a, 0x00, 0xff, 0x00, 0x6b, 0x00, 0x00, 0x7f, 0x7f, 0x10, 0x38, 0x68, 0x40, 0x00, 0xff, 0x00, 0x6c, 0x00, 0x00, 0x41, 0x7f, 0x7f, 0x40, 0x00, 0xff, 0x00, 0x6d, 0x00, 0x00, 0x7c, 0x7c, 0x18, 0x38, 0x1c, 0x7c, 0x78, 0x00, 0xff, 0x00, 0x6e, 0x00, 0x00, 0x7c, 0x7c, 0x04, 0x04, 0x7c, 0x78, 0x00, 0xff, 0x00, 0x6f, 0x00, 0x00, 0x38, 0x7c, 0x44, 0x44, 0x7c, 0x38, 0x00, 0xff, 0x00, 0x70, 0x00, 0x00, 0xfc, 0xfc, 0x24, 0x24, 0x3c, 0x18, 0x00, 0xff, 0x00, 0x71, 0x00, 0x00, 0x18, 0x3c, 0x24, 0x24, 0xfc, 0xfc, 0x00, 0xff, 0x00, 0x72, 0x00, 0x00, 0x7c, 0x7c, 0x04, 0x04, 0x0c, 0x08, 0x00, 0xff, 0x00, 0x73, 0x00, 0x00, 0x48, 0x5c, 0x54, 0x54, 0x74, 0x24, 0x00, 0xff, 0x00, 0x74, 0x00, 0x00, 0x04, 0x04, 0x3f, 0x7f, 0x44, 0x44, 0x00, 0xff, 0x00, 0x75, 0x00, 0x00, 0x3c, 0x7c, 0x40, 0x40, 0x7c, 0x7c, 0x00, 0xff, 0x00, 0x76, 0x00, 0x00, 0x1c, 0x3c, 0x60, 0x60, 0x3c, 0x1c, 0x00, 0xff, 0x00, 0x77, 0x00, 0x00, 0x1c, 0x7c, 0x70, 0x38, 0x70, 0x7c, 0x1c, 0x00, 0xff, 0x00, 0x78, 0x00, 0x00, 0x44, 0x6c, 0x38, 0x38, 0x6c, 0x44, 0x00, 0xff, 0x00, 0x79, 0x00, 0x00, 0x9c, 0xbc, 0xa0, 0xe0, 0x7c, 0x3c, 0x00, 0xff, 0x00, 0x7a, 0x00, 0x00, 0x44, 0x64, 0x74, 0x5c, 0x4c, 0x44, 0x00, 0xff, 0x00, 0xe5, 0x00, 0x20, 0x74, 0x55, 0x55, 0x7c, 0x78, 0x00, 0xff, 0x00, 0xe4, 0x00, 0x20, 0x75, 0x54, 0x54, 0x7d, 0x78, 0x00, 0xff, 0x00, 0xf6, 0x00, 0x00, 0x30, 0x7a, 0x48, 0x48, 0x7a, 0x30, 0x00, 0xff, 0x00, 0xe9, 0x00, 0x00, 0x38, 0x7c, 0x54, 0x56, 0x5d, 0x19, 0x00, 0xff, 0x00, 0xfc, 0x00, 0x00, 0x3a, 0x7a, 0x40, 0x40, 0x7a, 0x7a, 0x00, 0xff, 0x00, 0x30, 0x00, 0x00, 0x3e, 0x7f, 0x49, 0x45, 0x7f, 0x3e, 0x00, 0xff, 0x00, 0x31, 0x00, 0x00, 0x40, 0x44, 0x7f, 0x7f, 0x40, 0x40, 0x00, 0xff, 0x00, 0x32, 0x00, 0x00, 0x62, 0x73, 0x51, 0x49, 0x4f, 0x46, 0x00, 0xff, 0x00, 0x33, 0x00, 0x00, 0x22, 0x63, 0x49, 0x49, 0x7f, 0x36, 0x00, 0xff, 0x00, 0x34, 0x00, 0x00, 0x18, 0x18, 0x14, 0x16, 0x7f, 0x7f, 0x10, 0xff, 0x00, 0x35, 0x00, 0x00, 0x27, 0x67, 0x45, 0x45, 0x7d, 0x39, 0x00, 0xff, 0x00, 0x36, 0x00, 0x00, 0x3e, 0x7f, 0x49, 0x49, 0x7b, 0x32, 0x00, 0xff, 0x00, 0x37, 0x00, 0x00, 0x03, 0x03, 0x79, 0x7d, 0x07, 0x03, 0x00, 0xff, 0x00, 0x38, 0x00, 0x00, 0x36, 0x7f, 0x49, 0x49, 0x7f, 0x36, 0x00, 0xff, 0x00, 0x39, 0x00, 0x00, 0x26, 0x6f, 0x49, 0x49, 0x7f, 0x3e, 0x00, 0xff, 0x00, 0x2e, 0x00, 0x00, 0x60, 0x60, 0x00, 0xff, 0x00, 0x2c, 0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0xff, 0x00, 0x3f, 0x00, 0x00, 0x02, 0x03, 0x51, 0x59, 0x0f, 0x06, 0x00, 0xff, 0x00, 0x21, 0x00, 0x00, 0x4f, 0x4f, 0x00, 0xff, 0x00, 0x22, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0xff, 0x00, 0x23, 0x00, 0x00, 0x14, 0x7f, 0x7f, 0x14, 0x14, 0x7f, 0x7f, 0x14, 0x00, 0xff, 0x00, 0x24, 0x00, 0x00, 0x24, 0x2e, 0x6b, 0x6b, 0x3a, 0x12, 0x00, 0xff, 0x00, 0x25, 0x00, 0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63, 0x00, 0xff, 0x00, 0x26, 0x00, 0x00, 0x32, 0x7f, 0x4d, 0x4d, 0x77, 0x72, 0x50, 0x00, 0xff, 0x00, 0x2d, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0xff, 0x00, 0x2b, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08, 0x00, 0xff, 0x00, 0x2a, 0x00, 0x00, 0x08, 0x2a, 0x3e, 0x1c, 0x1c, 0x3e, 0x2a, 0x08, 0x00, 0xff, 0x00, 0x3a, 0x00, 0x00, 0x66, 0x66, 0x00, 0xff, 0x00, 0x3b, 0x00, 0x00, 0x80, 0xe6, 0x66, 0x00, 0xff, 0x00, 0x2f, 0x00, 0x00, 0x40, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00, 0xff, 0x00, 0x5c, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00, 0xff, 0x00, 0x3c, 0x00, 0x00, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x41, 0x00, 0xff, 0x00, 0x3e, 0x00, 0x00, 0x41, 0x41, 0x63, 0x36, 0x1c, 0x08, 0x00, 0xff, 0x00, 0x28, 0x00, 0x00, 0x1c, 0x3e, 0x63, 0x41, 0x00, 0xff, 0x00, 0x29, 0x00, 0x00, 0x41, 0x63, 0x3e, 0x1c, 0x00, 0xff, 0x00, 0x27, 0x00, 0x00, 0x04, 0x06, 0x03, 0x01, 0x00, 0xff, 0x00, 0x60, 0x00, 0x00, 0x01, 0x03, 0x06, 0x04, 0x00, 0xff, 0x00, 0x3d, 0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 };

//		private static readonly Random Random = new Random();
//		private BackgroundTaskDeferral _deferral;
//		private ISenseHat _senseHat;
//		private BwFont _bwFont;
//		private TextScroller _textScroller;
//		private Color[,] _resetColors;

//		public void Run(IBackgroundTaskInstance taskInstance)
//		{
//			_deferral = taskInstance.GetDeferral();

//			_senseHat = SenseHatFactory.Singleton.Create().Result;

//			byte version = _senseHat.FirmwareVersion;

//			_bwFont = BwFont.Deserialize(BwFontBytes);

//			foreach (BwCharacter character in _bwFont.GetChars())
//			{
//				character.GetColor = GetBwCharacterColor;
//			}

//			_textScroller = new TextScroller(_senseHat.Display, _bwFont.GetChars("Mattias made this nice scroller!!!  www.laserbrain.se  -*-*-*-"));

//			_resetColors = new Color[8, 8];
//			_senseHat.Display.Reset();
//			_senseHat.Display.CopyScreenToColors(_resetColors);


//			var mre = new ManualResetEventSlim(false);

//			//for (int i = 0; i < 10; i++)
//			//{
//			//	FillRandom();
//			//	mre.Wait(100);
//			//}

//			//_senseHat.Display.Clear();
//			//mre.Wait(3000);


//			//mre.Wait(3000);
//			_senseHat.Display.Reset();
//			_senseHat.Display.Update();
//			//mre.Wait(3000);


//			//DrawJoystickControlledTextScroller(true);
//			DrawJoystickControlledChar(true);


//			while (true)
//			{
//				AutoStepTextScroller();
//				mre.Wait(50);
//			}


//			//while (true)
//			//{
//			//	_senseHat.Joystick.Update();

//			//	//DrawJoystickControlledTextScroller(false);
//			//	DrawJoystickControlledChar(false);
//			//	//FillJoystick();
//			//	////FillRandom();

//			//	mre.Wait(100);
//			//}

//			//for (int i = 0; i < _rows.Length; i++)
//			//{
//			//	StepAngles();
//			//	_rows[i] = GetAngleColor();
//			//}

//			//while (true)
//			//{
//			//	StepAngles();

//			//	for (int i = _rows.Length - 1; i >= 1; i--)
//			//	{
//			//		_rows[i] = _rows[i - 1];
//			//	}

//			//	_rows[0] = GetAngleColor();

//			//	FillRows();
//			//	mre.Wait(2);
//			//}       
//		}

//		private void AutoStepTextScroller()
//		{
//			_senseHat.Display.Clear();

//			if (!_textScroller.Step())
//			{
//				_textScroller.Reset();
//			}

//			_textScroller.Render();

//			_senseHat.Display.Update();
//		}

//		private Color GetBwCharacterColor(BwCharacterRendererPixelMap pixelMap)
//		{
//			return _resetColors[pixelMap.CharPixelX % 8, pixelMap.CharPixelY % 8];
//		}

//		private void DrawJoystickControlledTextScroller(bool init)
//		{
//			if (init)
//			{
//				_senseHat.Display.Fill(Colors.Blue);
//				_textScroller.Render();
//				_senseHat.Display.Update();
//				return;
//			}

//			if (_senseHat.Joystick.EnterKey.IsPressed())
//			{
//				_textScroller.Reset();
//				_textScroller.Render();
//				_senseHat.Display.Update();
//			}
//			else if (_senseHat.Joystick.LeftKey.IsPressed())
//			{
//				_senseHat.Display.Fill(Colors.Blue);
//				if (_textScroller.Step())
//				{
//					_textScroller.Render();
//				}
//				else
//				{
//					_senseHat.Display.Fill(Colors.Aqua);
//				}

//				_senseHat.Display.Update();
//			}
//		}

//		private int _joystickControlledCharX;
//		private int _joystickControlledCharY;

//		private void DrawJoystickControlledChar(bool force)
//		{
//			if (!force && !_senseHat.Joystick.HasChanged)
//			{
//				return;
//			}

//			if (_senseHat.Joystick.EnterKey.IsPressed())
//			{
//				_joystickControlledCharX = 0;
//				_joystickControlledCharY = 0;
//			}

//			if (_senseHat.Joystick.LeftKey.IsPressed())
//			{
//				_joystickControlledCharX--;
//			}
//			else if (_senseHat.Joystick.RightKey.IsPressed())
//			{
//				_joystickControlledCharX++;
//			}

//			if (_senseHat.Joystick.UpKey.IsPressed())
//			{
//				_joystickControlledCharY--;
//			}
//			else if (_senseHat.Joystick.DownKey.IsPressed())
//			{
//				_joystickControlledCharY++;
//			}

//			BwCharacter a = _bwFont.GetChars("A").First();

//			_senseHat.Display.Fill(Colors.Black);
//			a.Render(_senseHat.Display, _joystickControlledCharX, _joystickControlledCharY);
//			_senseHat.Display.Update();
//		}

//		private void FillJoystick()
//		{
//			if (!_senseHat.Joystick.HasChanged)
//			{
//				return;
//			}

//			var pixels = new Color[8, 8];

//			DrawVertialLine(pixels, 0, GetKeyStateColor(_senseHat.Joystick.LeftKey));
//			DrawVertialLine(pixels, 7, GetKeyStateColor(_senseHat.Joystick.RightKey));

//			DrawHorizontalLine(pixels, 0, GetKeyStateColor(_senseHat.Joystick.UpKey));
//			DrawHorizontalLine(pixels, 7, GetKeyStateColor(_senseHat.Joystick.DownKey));

//			DrawRect(pixels, 2, 2, 5, 5, GetKeyStateColor(_senseHat.Joystick.EnterKey));

//			_senseHat.Display.CopyColorsToScreen(pixels);
//			_senseHat.Display.Update();
//		}

//		private static Color? GetKeyStateColor(KeyState keyState)
//		{
//			switch (keyState)
//			{
//				case KeyState.Released:
//					return null;
//				case KeyState.Pressing:
//					return Colors.Yellow;
//				case KeyState.Pressed:
//					return Colors.Red;
//				case KeyState.Releasing:
//					return Colors.Green;
//				default:
//					throw new ArgumentOutOfRangeException();
//			}

//		}

//		private static void DrawHorizontalLine(Color[,] pixels, int y, Color? color)
//		{
//			if (!color.HasValue)
//			{
//				return;
//			}

//			for (int x = 0; x < 8; x++)
//			{
//				pixels[x, y] = color.Value;
//			}
//		}

//		private static void DrawVertialLine(Color[,] pixels, int x, Color? color)
//		{
//			if (!color.HasValue)
//			{
//				return;
//			}

//			for (int y = 0; y < 8; y++)
//			{
//				pixels[x, y] = color.Value;
//			}
//		}

//		private static void DrawRect(Color[,] pixels, int x1, int y1, int x2, int y2, Color? color)
//		{
//			if (!color.HasValue)
//			{
//				return;
//			}

//			for (int y = y1; y <= y2; y++)
//			{
//				for (int x = x1; x <= x2; x++)
//				{
//					pixels[x, y] = color.Value;
//				}
//			}
//		}

//		private void FillRandom()
//		{
//			byte[] buffer = new byte[192];
//			Random.NextBytes(buffer);

//			var pixels = new Color[8, 8];

//			int bufferIndex = 0;
//			for (int y = 0; y < 8; y++)
//			{
//				for (int x = 0; x < 8; x++)
//				{
//					Color color = Color.FromArgb(
//						255,
//						buffer[bufferIndex++],
//						buffer[bufferIndex++],
//						buffer[bufferIndex++]);

//					pixels[x, y] = color;
//				}
//			}

//			_senseHat.Display.CopyColorsToScreen(pixels);
//		}

//		//private float _redAngle;
//		//private float _greenAngle;
//		//private float _blueAngle;
//		//private readonly Color[] _rows = new Color[8];

//		//private void StepAngles()
//		//{
//		//	_redAngle += 0.17f / 2;
//		//	_greenAngle += 0.31f / 2;
//		//	_blueAngle += 0.09f / 2;
//		//}

//		//private Color GetAngleColor()
//		//{
//		//	byte r = (byte)((Math.Sin(_redAngle) + 1f) / 2 * 256);
//		//	byte g = (byte)((Math.Cos(_greenAngle) + 1f) / 2 * 256);
//		//	byte b = (byte)((Math.Sin(_blueAngle) + 1f) / 2 * 256);
//		//	return Color.FromArgb(255, r, g, b);
//		//}

//		private void Fill(Color color)
//		{
//			var pixels = new Color[64];

//			for (int i = 0; i < 64; i++)
//			{
//				pixels[i] = color;
//			}

//			_senseHat.Display.CopyColorsToScreen(pixels);
//		}

//		//private void FillRows()
//		//{
//		//	byte[] ledBuffer = new byte[192];

//		//	for (int y = 0; y < 8; y++)
//		//	{
//		//		Color color = _rows[y];
//		//		for (int x = 0; x < 8; x++)
//		//		{
//		//			_senseHat.MapNextPixelToHat(ledBuffer, x, y, color);
//		//		}
//		//	}

//		//	_senseHat.WriteLedMatrix(ledBuffer);
//		//}
//	}
//}